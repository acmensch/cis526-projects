#!/usr/bin/env python

import argparse
import sys
import math
from collections import namedtuple
from collections import defaultdict

parser = argparse.ArgumentParser()
parser.add_argument('dir', help='Directory containing files')
parser.add_argument('-t', '--type', dest='type', default='train', choices=['train', 'test'], help='Should the features be generated for train or test set?')
parser.add_argument('-a', '--alignments', dest='alignments', default='_a', help='File containing alignments for each article.')
parser.add_argument('-b', '--features', dest='features', default='_features', help='File which to write features to.')
parser.add_argument('-e', '--english', dest='english', default='_e', help='File containing English articles.')
parser.add_argument('-f', '--foreign', dest='foreign', default='_f', help='File containing Foreign articles.')
parser.add_argument('-E', '--english_aligned', dest='english_aligned', default='europarl_e', help='File containing aligned English sentences.')
parser.add_argument('-F', '--foreign_aligned', dest='foreign_aligned', default='europarl_f', help='File containing aligned French sentences.')
args = parser.parse_args()

# Files with wikipedia entries and hand alignments
e_file = args.dir + '/' + args.type + args.english
f_file = args.dir + '/' + args.type + args.foreign
alignments_file = args.dir + '/' + args.type + args.alignments
feature_file = args.dir + '/' + args.type + args.features

# Aligned files (europarl)
ea_file = args.dir + '/' + args.english_aligned
fa_file = args.dir + '/' + args.foreign_aligned

article = namedtuple('article', 'name, lines')
pair = namedtuple('pair', 'name, f_lines, e_lines')

def article_data(filename):
    articles = []
    art = None
    newflag = True
    for line in open(filename):
        if len(line.strip()) == 0: 
            newflag = True
            if art != None: articles.append(art)
        elif newflag:
            art = article(line.strip(), [])
            newflag = False
        else:
            art[1].append(line.strip().split())
    articles.append(art)
    return articles

def combine_articles(a_f, a_e):
    pairs = []
    for f,e in zip(a_f, a_e):
        pairs.append(pair(e[0], f[1], e[1]))
    return pairs

sys.stderr.write("Training with Dice's coefficient...")
bitext = [[sentence.strip().split() for sentence in p] for p in zip(open(fa_file), open(ea_file))]
f_count = defaultdict(int)
e_count = defaultdict(int)
fe_count = defaultdict(int)
for (n, (f, e)) in enumerate(bitext):
  for f_i in set(f):
    f_count[f_i] += 1
    for e_j in set(e):
      fe_count[(f_i,e_j)] += 1
  for e_j in set(e):
    e_count[e_j] += 1
  if n % 500 == 0:
    sys.stderr.write(".")

dice = defaultdict(int)
for (k, (f_i, e_j)) in enumerate(fe_count.keys()):
    dice[(f_i,e_j)] = 2.0 * fe_count[(f_i, e_j)] / (f_count[f_i] + e_count[e_j])
    if k % 5000 == 0: sys.stderr.write(".")
sys.stderr.write("\n")

def dice_score(f, e):
    return sum(max(dice[fi, ei] for ei in e) for fi in f) / float(len(f))

ptr = open(feature_file, 'w')
sys.stderr.write("Calculating features...")

f_data = article_data(f_file)
e_data = article_data(e_file)
# if test data, return blank alignments for all articles
if args.type == 'train': a_data = open(alignments_file)
else: a_data = ['' for _ in range(len(f_data))]

# helper function for printing floats
def rdstr(i):
    return str(round(i, 6))

for (n, (p, a)) in enumerate(zip(combine_articles(f_data, e_data), a_data)):
    alignments = a.strip().split(', ')
    sys.stderr.write(".")
    for i, f_sent in enumerate(p.f_lines):
        for j, e_sent in enumerate(p.e_lines):
            a_string = str(i) + '-' + str(j)
            aligned = 0
            if a_string in alignments: aligned = 1
            word_ratio = float(max(len(e_sent), len(f_sent))) / min(len(e_sent), len(f_sent))
            ds = dice_score(f_sent, e_sent)
            # print article_num, sentence pair, class, word_ratio, and all features
            ptr.write('\t'.join([str(n), a_string, str(aligned), rdstr(word_ratio), rdstr(ds)]) + '\n')

sys.stderr.write("\n")
ptr.close()
